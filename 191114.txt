8.2 관계형 데이터베이스에서 확장성

1. 하드웨어 업그레이드 -> 메모리, CPU 코어 개수를 늘리기,
		      SSD, 인터넷 속도 등등
	-> 이방법은 어느 이상으로 업그레이드가 불가능하여 한계가 있음


데이터가 한 곳에 있지않고 여러 곳에 있기때문에 데이터의 일관성이 깨진다.

오버헤드가 증가하고
분산처리를 했을때 장애 = 데이터베이스가 한계가 있다. 
		     근데 하나가 죽으면 다른 데이터들이 위험해졌다.

8.3 관계형 데이터베이스에서 고가용성

관계형 데이터베이스는 ACID(원자성, 일관성, 고립성, 지속성)를 추구하는 것이 원칙

BASE : 기본적으로 가용성 -> 데이터 필드가 없다.

NoSQL : 분산형데이터 베이스에서 일관성을 포기하며 사용하는 것?
모바일은 관계형 데이터베이스보다 NoSQL을 더 많이 사용한다.


9 분산 서버 구조
9.1 수직 확장과 수평 확장

게임서버 	- 안정성
	- 성능 -> 동접 -> 랙

동접을 늘린다 : 서버를 최적화하고 버벅거리는 랙을 없애서 성능을 상승시켜 최대 접속자 수를 증가
확장성 : 동접을 쉽게 늘릴 수 있는 것, 사용자 수가 늘었을 때 쉽게 대응
Scale-up(스케일 업) : 수직확장(하드웨어의 성능을 상승)
Scale-out(스케일 아웃) : 수평확장(컴퓨터의 대수를 늘리는 것) 

서버끼리 주고 받는 통신량은 최소화가 되어야하는데 이렇게 설계하기가 어렵다.

비월드 서버 : 수평적 확장이 어느정도 됨?

서버에서 응답이 없으면 인터넷 프로토콜 TIMEOUT으로 에러를 보내고 접속을 종료
서버에서 closesocket()를 호출 한 것이아니라 응답으로 에러를 확인
즉, 동접의 한계가 있다. 그 한계를 늘릴려면??

받는 패킷보다 보내는 패킷이 더많으면 운영체제에서는 계속 쌓여서 메모리가 풀나면서 서버가 죽는다.

서버가 터질라하면 랙이 걸리고, 접속이 잘 안되고 그런다.

샤딩 : 서버를 여러개 두는 것

왜 한게임에서 서버를 여러개로 나누었나? -> 구현하기가 쉬워서
-> 단점 : 다른 서버로 이전을 하고 싶으면 다른서버에서 새 캐릭터를
	 생성해야한다. 

게임회사는 되도록이면 단일 서버에서 모든 플레이어들을 접속이 가능하게 하고 싶어한다. 킹치만 안돼 ㅠㅠ

새로운 서버는 서류는 통과
분산 증설을 해야할 때 부하가 많을 때
부하가 많은걸 알기 위해 부하가 걸리는 지점을 검색하여 찾아서 알아본다.


최적화 : 프로그램의 성능을 향상시켜서 더 많은 예외처리를 하는 것


분산 : 데이터의 양이 많아지면 그 데이터를 처리하는 CPU의 양은 제한이 되어있다.
      그래서 데이터를 나눠서 처리해 주어야한다.
      한사람이 다 처리를 하는 것이 아니라 기능별로 나뉘거나 생산라인을 중복시켜서 나누는 것 둘다 분산이다.

동기분산처리를할 때 기다림 동안에 오버헤드가 발생함


